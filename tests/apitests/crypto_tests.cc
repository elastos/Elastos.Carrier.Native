/*
 * Copyright (c) 2022 - 2023 trinity-tech.io
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#include <carrier.h>
#include "crypto_context.h"
#include "crypto_tests.h"

namespace test {
using namespace elastos::carrier;

CPPUNIT_TEST_SUITE_REGISTRATION(CryptoTester);

void CryptoTester::setUp() {}

void CryptoTester::testEncryption()
{
    auto senderKeyPair = CryptoBox::KeyPair();
    auto receiverKeyPair = CryptoBox::KeyPair();

    auto nonce = CryptoBox::Nonce().random();

    std::vector<uint8_t> data1 = {
        0xbe, 0x07, 0x5f, 0xc5, 0x3c, 0x81, 0xf2, 0xd5, 0xcf, 0x14, 0x13, 0x16,
        0xeb, 0xeb, 0x0c, 0x7b, 0x52, 0x28, 0xc5, 0x2a, 0x4c, 0x62, 0xcb, 0xd4,
        0x4b, 0x66, 0x84, 0x9b, 0x64, 0x24, 0x4f, 0xfc, 0xe5, 0xec, 0xba, 0xaf,
        0x33, 0xbd, 0x75, 0x1a, 0x1a, 0xc7, 0x28, 0xd4, 0x5e, 0x6c, 0x61, 0x29,
        0x6c, 0xdc, 0x3c, 0x01, 0x23, 0x35, 0x61, 0xf4, 0x1d, 0xb6, 0x6c, 0xce,
        0x31, 0x4a, 0xdb, 0x31, 0x0e, 0x3b, 0xe8, 0x25, 0x0c, 0x46, 0xf0, 0x6d,
        0xce, 0xea, 0x3a, 0x7f, 0xa1, 0x34, 0x80, 0x57, 0xe2, 0xf6, 0x55, 0x6a,
        0xd6, 0xb1, 0x31, 0x8a, 0x02, 0x4a, 0x83, 0x8f, 0x21, 0xaf, 0x1f, 0xde,
        0x04, 0x89, 0x77, 0xeb, 0x48, 0xf5, 0x9f, 0xfd, 0x49, 0x24, 0xca, 0x1c,
        0x60, 0x90, 0x2e, 0x52, 0xf0, 0xa0, 0x89, 0xbc, 0x76, 0x89, 0x70, 0x40,
        0xe0, 0x82, 0xf9, 0x37, 0x76, 0x38, 0x48, 0x64, 0x5e, 0x07, 0x05
    };
    std::vector<uint8_t> data2(64 * 1024, 10);

    // encrypt data
    auto encryptedBox = CryptoBox(receiverKeyPair.publicKey(), senderKeyPair.privateKey());
    auto decryptedBox = CryptoBox(senderKeyPair.publicKey(), receiverKeyPair.privateKey());

    std::vector<uint8_t> encrypted1 = encryptedBox.encrypt(data1, nonce);
    std::vector<uint8_t> decrypted1 = decryptedBox.decrypt(encrypted1, nonce);
    CPPUNIT_ASSERT(data1 == decrypted1);

    std::vector<uint8_t> encrypted2 = encryptedBox.encrypt(data2, nonce);
    std::vector<uint8_t> decrypted2 = decryptedBox.decrypt(encrypted2, nonce);
    std::vector<uint8_t> decrypted3 = CryptoBox::decrypt(encrypted2, nonce, senderKeyPair.publicKey(), receiverKeyPair.privateKey());
    CPPUNIT_ASSERT(data2 == decrypted2);
    CPPUNIT_ASSERT(data2 == decrypted3);

    // encrypt data (invalid)
    std::vector<uint8_t> encrypted3 = encryptedBox.encrypt(data1, nonce);
    encrypted3[1]++;
    CPPUNIT_ASSERT_THROW(decryptedBox.decrypt(encrypted3, nonce), std::runtime_error);

    std::vector<uint8_t> encrypted = encryptedBox.encrypt(data2, nonce);
    encrypted[2]++;
    CPPUNIT_ASSERT_THROW(decryptedBox.decrypt(encrypted, nonce), std::runtime_error);
}

void CryptoTester::testSignatrue()
{
    auto keyPair = Signature::KeyPair();

    std::vector<uint8_t> data = {
        0xbe, 0x07, 0x5f, 0xc5, 0x3c, 0x81, 0xf2, 0xd5, 0xcf, 0x14, 0x13, 0x16,
        0xeb, 0xeb, 0x0c, 0x7b, 0x52, 0x28, 0xc5, 0x2a, 0x4c, 0x62, 0xcb, 0xd4,
        0x4b, 0x66, 0x84, 0x9b, 0x64, 0x24, 0x4f, 0xfc, 0xe5, 0xec, 0xba, 0xaf,
        0x33, 0xbd, 0x75, 0x1a, 0x1a, 0xc7, 0x28, 0xd4, 0x5e, 0x6c, 0x61, 0x29,
        0x6c, 0xdc, 0x3c, 0x01, 0x23, 0x35, 0x61, 0xf4, 0x1d, 0xb6, 0x6c, 0xce,
        0x31, 0x4a, 0xdb, 0x31, 0x0e, 0x3b, 0xe8, 0x25, 0x0c, 0x46, 0xf0, 0x6d,
        0xce, 0xea, 0x3a, 0x7f, 0xa1, 0x34, 0x80, 0x57, 0xe2, 0xf6, 0x55, 0x6a,
        0xd6, 0xb1, 0x31, 0x8a, 0x02, 0x4a, 0x83, 0x8f, 0x21, 0xaf, 0x1f, 0xde,
        0x04, 0x89, 0x77, 0xeb, 0x48, 0xf5, 0x9f, 0xfd, 0x49, 0x24, 0xca, 0x1c,
        0x60, 0x90, 0x2e, 0x52, 0xf0, 0xa0, 0x89, 0xbc, 0x76, 0x89, 0x70, 0x40,
        0xe0, 0x82, 0xf9, 0x37, 0x76, 0x38, 0x48, 0x64, 0x5e, 0x07, 0x05
    };

    std::vector<uint8_t> data1 = {
        0x9d,0x61,0xb1,0x9d,0xef,0xfd,0x5a,0x60,0xba,0x84,0x4a,0xf4,0x92,0xec,
        0x2c,0xc4,0x44,0x49,0xc5,0x69,0x7b,0x32,0x69,0x19,0x70,0x3b,0xac,0x03,
        0x1c,0xae,0x7f,0x60
    };

    std::vector<uint8_t> data2 = {
        0xd7,0x5a,0x98,0x01,0x82,0xb1,0x0a,0xb7,0xd5,0x4b,0xfe,0xd3,0xc9,0x64,
        0x07,0x3a,0x0e,0xe1,0x72,0xf3,0xda,0xa6,0x23,0x25,0xaf,0x02,0x1a,0x68,
        0xf7,0x07,0x51,0x1a
    };

    std::vector<uint8_t> data3 = {
        0xe5,0x56,0x43,0x00,0xc3,0x60,0xac,0x72,0x90,0x86,0xe2,0xcc,0x80,0x6e,
        0x82,0x8a,0x84,0x87,0x7f,0x1e,0xb8,0xe5,0xd9,0x74,0xd8,0x73,0xe0,0x65,
        0x22,0x49,0x01,0x55,0x5f,0xb8,0x82,0x15,0x90,0xa3,0x3b,0xac,0xc6,0x1e,
        0x39,0x70,0x1c,0xf9,0xb4,0x6b,0xd2,0x5b,0xf5,0xf0,0x59,0x5b,0xbe,0x24,
        0x65,0x51,0x41,0x43,0x8e,0x7a,0x10,0x0b
    };

    std::vector<uint8_t> data4 = {
        0xe5,0x56,0x43,0x00,0xc3,0x60,0xac,0x72,0x90,0x86,0xe2,0xcc,0x80,0x6e,
        0x82,0x8a,0x84,0x87,0x7f,0x1e,0xb8,0xe5,0xd9,0x74,0xd8,0x73,0xe0,0x65,
        0x22,0x49,0x01,0x55,0x5f,0xb8,0x82,0x15,0x90,0xa3,0x3b,0xac,0xc6,0x1e,
        0x39,0x70,0x1c,0xf9,0xb4,0x6a,0xd2,0x5b,0xf5,0xf0,0x59,0x5b,0xbe,0x24,
        0x65,0x51,0x41,0x43,0x8e,0x7a,0x10,0x0b
    };

    auto sign = keyPair.privateKey().sign(data);
    CPPUNIT_ASSERT(keyPair.publicKey().verify(sign, data));

    sign[2]++;
    CPPUNIT_ASSERT(keyPair.publicKey().verify(sign, data) == false);

    //for multi data
    auto signature = Signature();
    signature.update(data1);
    signature.update(data2);
    signature.update(data3);

    Signature signature1 = signature;
    auto multisign= signature.sign(keyPair.privateKey());

    CPPUNIT_ASSERT(signature1.verify(multisign, keyPair.publicKey()));

    signature.reset();
    signature.update(data1);
    signature.update(data2);
    signature.update(data4);
    CPPUNIT_ASSERT(signature.verify(multisign, keyPair.publicKey()) == false);
}

void CryptoTester::testPublicKey()
{
    auto keyPair = Signature::KeyPair();
    auto id = Id(keyPair.publicKey());
    auto pk = id.toKey();

    CPPUNIT_ASSERT(keyPair.publicKey() == *pk);
}

void CryptoTester::testCrytoContext()
{
    auto senderKeyPair = CryptoBox::KeyPair();
    auto receiverKeyPair = CryptoBox::KeyPair();

    auto encryptContext = CryptoContext(senderKeyPair.publicKey(), receiverKeyPair);
    auto decryptContext = CryptoContext(receiverKeyPair.publicKey(), senderKeyPair);

    std::vector<uint8_t> data1 = {
        0xbe, 0x07, 0x5f, 0xc5, 0x3c, 0x81, 0xf2, 0xd5, 0xcf, 0x14, 0x13, 0x16,
        0xeb, 0xeb, 0x0c, 0x7b, 0x52, 0x28, 0xc5, 0x2a, 0x4c, 0x62, 0xcb, 0xd4,
        0x4b, 0x66, 0x84, 0x9b, 0x64, 0x24, 0x4f, 0xfc, 0xe5, 0xec, 0xba, 0xaf,
        0x33, 0xbd, 0x75, 0x1a, 0x1a, 0xc7, 0x28, 0xd4, 0x5e, 0x6c, 0x61, 0x29,
        0x6c, 0xdc, 0x3c, 0x01, 0x23, 0x35, 0x61, 0xf4, 0x1d, 0xb6, 0x6c, 0xce,
        0x31, 0x4a, 0xdb, 0x31, 0x0e, 0x3b, 0xe8, 0x25, 0x0c, 0x46, 0xf0, 0x6d,
        0xce, 0xea, 0x3a, 0x7f, 0xa1, 0x34, 0x80, 0x57, 0xe2, 0xf6, 0x55, 0x6a,
        0xd6, 0xb1, 0x31, 0x8a, 0x02, 0x4a, 0x83, 0x8f, 0x21, 0xaf, 0x1f, 0xde,
        0x04, 0x89, 0x77, 0xeb, 0x48, 0xf5, 0x9f, 0xfd, 0x49, 0x24, 0xca, 0x1c,
        0x60, 0x90, 0x2e, 0x52, 0xf0, 0xa0, 0x89, 0xbc, 0x76, 0x89, 0x70, 0x40,
        0xe0, 0x82, 0xf9, 0x37, 0x76, 0x38, 0x48, 0x64, 0x5e, 0x07, 0x05
    };

    auto encrypted = encryptContext.encrypt(data1);
    CPPUNIT_ASSERT(encrypted.size());

    auto decrypted = decryptContext.decrypt(encrypted);
    CPPUNIT_ASSERT(decrypted.size());
    CPPUNIT_ASSERT(data1 == decrypted);
}

void CryptoTester::tearDown() {}

}  // namespace test
